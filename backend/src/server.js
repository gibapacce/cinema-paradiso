/**
 * ðŸŽ¬ Cinema Reservas - Servidor Principal
 * 
 * Este arquivo configura e inicializa o servidor Express.js que gerencia
 * todas as requisiÃ§Ãµes da API do sistema de reservas de cinema.
 * 
 * @author Gilberto Filho
 * @version 1.0.0
 */

// ImportaÃ§Ãµes necessÃ¡rias
const express = require("express");           // Framework web para Node.js
const cors = require("cors");                 // Middleware para permitir requisiÃ§Ãµes cross-origin
require("dotenv").config();                   // Carrega variÃ¡veis de ambiente do arquivo .env

// Importa as rotas da aplicaÃ§Ã£o
const cinemaRoutes = require("./routes/cinema");

// Cria uma instÃ¢ncia do Express
const app = express();

// Define a porta do servidor (usa variÃ¡vel de ambiente ou padrÃ£o 3001)
const PORT = process.env.PORT || 3001;

/**
 * ConfiguraÃ§Ã£o de Middlewares
 * Middlewares sÃ£o funÃ§Ãµes que processam requisiÃ§Ãµes antes de chegarem Ã s rotas
 */

// Middleware CORS - Permite requisiÃ§Ãµes de diferentes origens (frontend)
app.use(cors());

// Middleware JSON - Permite que o servidor processe dados JSON nas requisiÃ§Ãµes
app.use(express.json());

/**
 * ConfiguraÃ§Ã£o das Rotas
 * Define os endpoints da API
 */

// Prefixa todas as rotas de cinema com '/api'
// Exemplo: /api/filmes, /api/filmes/1/sessoes, etc.
app.use("/api", cinemaRoutes);

/**
 * Middleware de Tratamento de Erros
 * Captura e trata erros que ocorrem durante o processamento das requisiÃ§Ãµes
 */
app.use((error, req, res, next) => {
  // Loga o erro no console para debugging
  console.error("Erro:", error);
  
  // Retorna erro 500 (Internal Server Error) para o cliente
  res.status(500).json({ error: "Erro interno do servidor" });
});

/**
 * InicializaÃ§Ã£o do Servidor
 * Inicia o servidor na porta especificada
 */
app.listen(PORT, () => {
  console.log(`ðŸŽ¬ Servidor Cinema Reservas rodando na porta ${PORT}`);
  console.log(`ðŸ“¡ API disponÃ­vel em: http://localhost:${PORT}/api`);
});
