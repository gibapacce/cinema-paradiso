/**
 * üé¨ Cinema Reservas - Servi√ßo Principal
 * 
 * Este arquivo cont√©m a l√≥gica de neg√≥cio do sistema de reservas de cinema.
 * O servi√ßo coordena as opera√ß√µes entre os controladores e os reposit√≥rios,
 * implementando as regras de neg√≥cio da aplica√ß√£o.
 * 
 * @author Gilberto Filho
 * @version 1.0.0
 */

// Importa os reposit√≥rios para acesso aos dados
const FilmeRepository = require("../repositories/FilmeRepository");
const SessaoRepository = require("../repositories/SessaoRepository");
const AssentoRepository = require("../repositories/AssentoRepository");
const ReservaRepository = require("../repositories/ReservaRespository");

/**
 * Classe CinemaService
 * Cont√©m toda a l√≥gica de neg√≥cio da aplica√ß√£o
 */
class CinemaService {
  constructor() {
    // Inicializa os reposit√≥rios para acesso aos dados
    this.filmeRepo = new FilmeRepository();
    this.sessaoRepo = new SessaoRepository();
    this.assentoRepo = new AssentoRepository();
    this.reservaRepo = new ReservaRepository();
  }

  /**
   * Busca todos os filmes ativos em cartaz
   * 
   * @returns {Array} Array com todos os filmes ativos
   * @throws {Error} Erro se n√£o conseguir buscar os filmes
   */
  async listarFilmes() {
    // Chama o reposit√≥rio para buscar filmes ativos
    return await this.filmeRepo.findAtivos();
  }

  /**
   * Busca todas as sess√µes dispon√≠veis para um filme espec√≠fico
   * 
   * @param {number} filmeId - ID do filme
   * @param {string} data - Data espec√≠fica (opcional)
   * @returns {Object} Objeto contendo o filme e suas sess√µes
   * @throws {Error} Erro se o filme n√£o for encontrado
   */
  async listarSessoes(filmeId, data) {
    // Primeiro, verifica se o filme existe
    const filme = await this.filmeRepo.findById(filmeId);
    if (!filme) {
      throw new Error("Filme n√£o encontrado");
    }

    // Busca as sess√µes do filme
    const sessoes = await this.sessaoRepo.findByFilme(filmeId, data);

    // Retorna o filme junto com suas sess√µes
    return { filme, sessoes };
  }

  /**
   * Visualiza o layout completo de assentos de uma sess√£o
   * 
   * @param {number} sessaoId - ID da sess√£o
   * @returns {Object} Objeto contendo dados da sess√£o e layout de assentos
   * @throws {Error} Erro se a sess√£o n√£o for encontrada
   */
  async visualizarAssentos(sessaoId) {
    // Primeiro, verifica se a sess√£o existe
    const sessao = await this.sessaoRepo.findById(sessaoId);
    if (!sessao) {
      throw new Error("Sess√£o n√£o encontrada");
    }

    // Busca todos os assentos da sess√£o
    const assentos = await this.assentoRepo.findBySessao(sessaoId);

    // Organiza os assentos por fileira para facilitar a visualiza√ß√£o
    const fileiras = {};
    assentos.forEach((assento) => {
      // Se a fileira n√£o existe, cria um array vazio
      if (!fileiras[assento.fileira]) {
        fileiras[assento.fileira] = [];
      }
      // Adiciona o assento √† sua fileira
      fileiras[assento.fileira].push(assento);
    });

    // Retorna os dados organizados
    return {
      sessao,
      layout: {
        // Lista ordenada de fileiras (A, B, C, D, E)
        fileiras: Object.keys(fileiras).sort(),
        // N√∫mero de assentos por fileira (baseado na primeira fileira)
        assentos_por_fileira: fileiras[Object.keys(fileiras)[0]]?.length || 0,
        // Lista completa de assentos
        assentos,
      },
    };
  }

  /**
   * Reserva um assento espec√≠fico para uma sess√£o
   * 
   * @param {number} sessaoId - ID da sess√£o
   * @param {number} assentoId - ID do assento
   * @returns {Object} Dados da reserva criada
   * @throws {Error} Erro se o assento n√£o estiver dispon√≠vel ou j√° estiver reservado
   */
  async reservarAssento(sessaoId, assentoId) {
    // Chama o reposit√≥rio para criar a reserva com transa√ß√£o
    // A transa√ß√£o garante que n√£o haver√° conflitos se m√∫ltiplos usu√°rios
    // tentarem reservar o mesmo assento simultaneamente
    return await this.reservaRepo.createWithTransaction(sessaoId, assentoId);
  }
}

module.exports = CinemaService;
