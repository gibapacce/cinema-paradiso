/**
 * üé¨ Cinema Reservas - Servi√ßo de API
 * 
 * Este arquivo configura e exporta as fun√ß√µes para comunica√ß√£o com a API
 * do backend. Utiliza Axios para fazer requisi√ß√µes HTTP e centraliza
 * todas as chamadas da API em um local.
 * 
 * @author Gilberto Filho
 * @version 1.0.0
 */

import axios from "axios";

/**
 * Configura√ß√£o base do Axios
 * Cria uma inst√¢ncia do Axios com configura√ß√µes padr√£o para todas as requisi√ß√µes
 */
const api = axios.create({
  // URL base da API - aponta para o servidor backend
  baseURL: "http://localhost:3001/api",
  
  // Timeout padr√£o de 10 segundos para requisi√ß√µes
  timeout: 10000,
  
  // Headers padr√£o para todas as requisi√ß√µes
  headers: {
    'Content-Type': 'application/json',
  }
});

/**
 * Objeto que cont√©m todas as fun√ß√µes da API do cinema
 * Cada fun√ß√£o faz uma requisi√ß√£o espec√≠fica para um endpoint
 */
export const cinemaApi = {
  /**
   * Lista todos os filmes ativos em cartaz
   * 
   * @returns {Promise} Promise que resolve com os dados dos filmes
   * 
   * Endpoint: GET /api/filmes
   * Resposta: { filmes: [...] }
   */
  listarFilmes: () => api.get("/filmes"),

  /**
   * Lista todas as sess√µes dispon√≠veis para um filme espec√≠fico
   * 
   * @param {number} filmeId - ID do filme
   * @param {string} data - Data espec√≠fica (opcional)
   * @returns {Promise} Promise que resolve com filme e sess√µes
   * 
   * Endpoint: GET /api/filmes/{filmeId}/sessoes?data={data}
   * Resposta: { filme: {...}, sessoes: [...] }
   */
  listarSessoes: (filmeId, data) => {
    // Se uma data foi fornecida, inclui como par√¢metro de query
    const params = data ? { data } : {};
    
    // Faz requisi√ß√£o GET com par√¢metros opcionais
    return api.get(`/filmes/${filmeId}/sessoes`, { params });
  },

  /**
   * Visualiza o layout de assentos de uma sess√£o espec√≠fica
   * 
   * @param {number} sessaoId - ID da sess√£o
   * @returns {Promise} Promise que resolve com dados da sess√£o e layout
   * 
   * Endpoint: GET /api/sessoes/{sessaoId}/assentos
   * Resposta: { sessao: {...}, layout: {...} }
   */
  visualizarAssentos: (sessaoId) => api.get(`/sessoes/${sessaoId}/assentos`),

  /**
   * Reserva um assento espec√≠fico para uma sess√£o
   * 
   * @param {number} sessaoId - ID da sess√£o
   * @param {number} assentoId - ID do assento
   * @returns {Promise} Promise que resolve com dados da reserva criada
   * 
   * Endpoint: POST /api/sessoes/{sessaoId}/reservas
   * Body: { assento_id: number }
   * Resposta: { reserva: {...} }
   */
  reservarAssento: (sessaoId, assentoId) =>
    api.post(`/sessoes/${sessaoId}/reservas`, { assento_id: assentoId }),
};

/**
 * Interceptor para requisi√ß√µes - loga todas as requisi√ß√µes para debugging
 */
api.interceptors.request.use(
  (config) => {
    console.log(`üåê API Request: ${config.method?.toUpperCase()} ${config.url}`);
    return config;
  },
  (error) => {
    console.error('‚ùå API Request Error:', error);
    return Promise.reject(error);
  }
);

/**
 * Interceptor para respostas - loga todas as respostas para debugging
 */
api.interceptors.response.use(
  (response) => {
    console.log(`‚úÖ API Response: ${response.status} ${response.config.url}`);
    return response;
  },
  (error) => {
    console.error('‚ùå API Response Error:', error.response?.status, error.response?.data);
    return Promise.reject(error);
  }
);

// Exporta a inst√¢ncia do Axios para uso direto se necess√°rio
export default api; 